<?xml version="1.0"?>
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

    <!-- **********************************************************************
         DVR Vulnerability Types - CSV Import Stylesheet

         CSV column.........Format........................Content

         Type...............string........................Type Name
         Code...............string........................Type Code
         Sectors............semicolon-separated strings...Sector Abbreviations
         Comments...........string........................Comments

    *********************************************************************** -->
    <xsl:output method="xml"/>

    <xsl:include href="../../xml/commons.xsl"/>

    <xsl:variable name="SectorPrefix" select="'Sector:'"/>

    <!-- ****************************************************************** -->
    <xsl:template match="/">
        <s3xml>
            <xsl:apply-templates select="table/row"/>
        </s3xml>
    </xsl:template>

    <!-- ****************************************************************** -->
    <xsl:template match="row">

        <xsl:variable name="Name" select="col[@field='Type']/text()"/>

        <xsl:if test="$Name!=''">

            <xsl:variable name="Code" select="normalize-space(col[@field='Code']/text())"/>
            <xsl:variable name="Sectors" select="normalize-space(col[@field='Sectors']/text())"/>
            <xsl:variable name="Comments" select="normalize-space(col[@field='Comments']/text())"/>

            <resource name="dvr_vulnerability_type">

                <data field="name">
                    <xsl:value-of select="$Name"/>
                </data>

                <xsl:if test="$Code!=''">
                    <data field="code">
                        <xsl:value-of select="$Code"/>
                    </data>
                </xsl:if>

                <data field="Comments">
                    <xsl:value-of select="$Comments"/>
                </data>

                <!-- Sector Links -->
                <xsl:if test="$Sectors!=''">
                    <xsl:call-template name="splitList">
                        <xsl:with-param name="list">
                            <xsl:value-of select="$Sectors"/>
                        </xsl:with-param>
                        <xsl:with-param name="listsep" select="';'"/>
                        <xsl:with-param name="arg">sector_ref</xsl:with-param>
                    </xsl:call-template>
                </xsl:if>

            </resource>

            <!-- Sectors -->
            <xsl:if test="$Sectors!=''">
                <xsl:call-template name="splitList">
                    <xsl:with-param name="list"><xsl:value-of select="$Sectors"/></xsl:with-param>
                    <xsl:with-param name="listsep" select="';'"/>
                    <xsl:with-param name="arg">sector_res</xsl:with-param>
                </xsl:call-template>
            </xsl:if>

        </xsl:if>

    </xsl:template>

    <!-- ****************************************************************** -->
    <xsl:template name="resource">
        <xsl:param name="item"/>
        <xsl:param name="arg"/>

        <xsl:choose>

            <!-- Sector Links -->
            <xsl:when test="$arg='sector_ref'">
                <resource name="dvr_vulnerability_type_sector">
                    <reference field="sector_id" resource="org_sector">
                        <xsl:attribute name="tuid">
                            <xsl:value-of select="concat($SectorPrefix, $item)"/>
                        </xsl:attribute>
                    </reference>
                </resource>
            </xsl:when>

            <!-- Sectors -->
            <xsl:when test="$arg='sector_res'">
                <resource name="org_sector">
                    <xsl:attribute name="tuid">
                        <xsl:value-of select="concat($SectorPrefix, $item)"/>
                    </xsl:attribute>
                    <data field="abrv"><xsl:value-of select="$item"/></data>
                </resource>
            </xsl:when>

        </xsl:choose>
    </xsl:template>

    <!-- END ************************************************************** -->

</xsl:stylesheet>
